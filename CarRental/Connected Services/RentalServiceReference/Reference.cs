//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarRental_v3.RentalServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarContract", Namespace="http://schemas.datacontract.org/2004/07/CarRental_v3.Service")]
    [System.SerializableAttribute()]
    public partial class CarContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CarIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CarId {
            get {
                return this.CarIdField;
            }
            set {
                if ((this.CarIdField.Equals(value) != true)) {
                    this.CarIdField = value;
                    this.RaisePropertyChanged("CarId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RentalServiceReference.IRentalService")]
    public interface IRentalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentalService/GetAvailableCars", ReplyAction="http://tempuri.org/IRentalService/GetAvailableCarsResponse")]
        CarRental_v3.RentalServiceReference.CarContract[] GetAvailableCars(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentalService/GetAvailableCars", ReplyAction="http://tempuri.org/IRentalService/GetAvailableCarsResponse")]
        System.Threading.Tasks.Task<CarRental_v3.RentalServiceReference.CarContract[]> GetAvailableCarsAsync(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentalService/GetUnavailableCars", ReplyAction="http://tempuri.org/IRentalService/GetUnavailableCarsResponse")]
        CarRental_v3.RentalServiceReference.CarContract[] GetUnavailableCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentalService/GetUnavailableCars", ReplyAction="http://tempuri.org/IRentalService/GetUnavailableCarsResponse")]
        System.Threading.Tasks.Task<CarRental_v3.RentalServiceReference.CarContract[]> GetUnavailableCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentalService/RentCar", ReplyAction="http://tempuri.org/IRentalService/RentCarResponse")]
        bool RentCar(int carId, string employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentalService/RentCar", ReplyAction="http://tempuri.org/IRentalService/RentCarResponse")]
        System.Threading.Tasks.Task<bool> RentCarAsync(int carId, string employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentalService/ReturnCar", ReplyAction="http://tempuri.org/IRentalService/ReturnCarResponse")]
        bool ReturnCar(int carId, string employee, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRentalService/ReturnCar", ReplyAction="http://tempuri.org/IRentalService/ReturnCarResponse")]
        System.Threading.Tasks.Task<bool> ReturnCarAsync(int carId, string employee, string location);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRentalServiceChannel : CarRental_v3.RentalServiceReference.IRentalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RentalServiceClient : System.ServiceModel.ClientBase<CarRental_v3.RentalServiceReference.IRentalService>, CarRental_v3.RentalServiceReference.IRentalService {
        
        public RentalServiceClient() {
        }
        
        public RentalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RentalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RentalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RentalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CarRental_v3.RentalServiceReference.CarContract[] GetAvailableCars(string location) {
            return base.Channel.GetAvailableCars(location);
        }
        
        public System.Threading.Tasks.Task<CarRental_v3.RentalServiceReference.CarContract[]> GetAvailableCarsAsync(string location) {
            return base.Channel.GetAvailableCarsAsync(location);
        }
        
        public CarRental_v3.RentalServiceReference.CarContract[] GetUnavailableCars() {
            return base.Channel.GetUnavailableCars();
        }
        
        public System.Threading.Tasks.Task<CarRental_v3.RentalServiceReference.CarContract[]> GetUnavailableCarsAsync() {
            return base.Channel.GetUnavailableCarsAsync();
        }
        
        public bool RentCar(int carId, string employee) {
            return base.Channel.RentCar(carId, employee);
        }
        
        public System.Threading.Tasks.Task<bool> RentCarAsync(int carId, string employee) {
            return base.Channel.RentCarAsync(carId, employee);
        }
        
        public bool ReturnCar(int carId, string employee, string location) {
            return base.Channel.ReturnCar(carId, employee, location);
        }
        
        public System.Threading.Tasks.Task<bool> ReturnCarAsync(int carId, string employee, string location) {
            return base.Channel.ReturnCarAsync(carId, employee, location);
        }
    }
}
